"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var BlogService = (function () {
    function BlogService() {
        this.articles = [];
        this.articles.push({ id: 1, title: "Reasons to use Angular 2", date: new Date(), body: "<p>\n            Angular 2 is the new frameworks from both Google and Microsoft (an unholy alliance I know). It provides\n            a unique set of features to build super fast single page applications for next-gen web apps. It utilizes\n            a new subset of Javascript called Typescript (all of the .ts files in my source directory). This takes\n            all current features of es5 and adds in the future features of es6 now. It then will compile these features\n            down to currently suppoted es5 scripts. It also adds in the ability to make your javascript statically typed.\n            But perhaps the best feature of angular 2 is it's modular nature.\n        </p>\n        <p>\n            Angular 2 is a modular based frameworks. A properly formatted angular 2 project will be composed of several\n            modular components. These components have their own encapsulated routes, html, css, and services. This means\n            that a well built component (say this blog) can provide a readme file that defines required endpoints and\n            will simply need to be included by the root component in order to be fully functional. Then as it has it's own\n            css you can define base formats that can then be overwritten by a particular sites individual global css files.\n            These components can also be lazy loaded (meaning they can be loaded after the initial page is shown) to\n            help reduce the initial load time of your page.\n        </p>", short: "Angular 2 is the best frameworks ever and everyone should use it", imgUrl: "/img/placeholder.png" });
        this.articles.push({ id: 2, title: "Reasons to use Angular 2", date: new Date(), body: "<p>\n            Angular 2 is the new frameworks from both Google and Microsoft (an unholy alliance I know). It provides\n            a unique set of features to build super fast single page applications for next-gen web apps. It utilizes\n            a new subset of Javascript called Typescript (all of the .ts files in my source directory). This takes\n            all current features of es5 and adds in the future features of es6 now. It then will compile these features\n            down to currently suppoted es5 scripts. It also adds in the ability to make your javascript statically typed.\n            But perhaps the best feature of angular 2 is it's modular nature.\n        </p>\n        <p>\n            Angular 2 is a modular based frameworks. A properly formatted angular 2 project will be composed of several\n            modular components. These components have their own encapsulated routes, html, css, and services. This means\n            that a well built component (say this blog) can provide a readme file that defines required endpoints and\n            will simply need to be included by the root component in order to be fully functional. Then as it has it's own\n            css you can define base formats that can then be overwritten by a particular sites individual global css files.\n            These components can also be lazy loaded (meaning they can be loaded after the initial page is shown) to\n            help reduce the initial load time of your page.\n        </p>", short: "Angular 2 is the best frameworks ever and everyone should use it", imgUrl: "/img/placeholder.png" });
        this.articles.push({ id: 3, title: "Reasons to use Angular 2", date: new Date(), body: "<p>\n            Angular 2 is the new frameworks from both Google and Microsoft (an unholy alliance I know). It provides\n            a unique set of features to build super fast single page applications for next-gen web apps. It utilizes\n            a new subset of Javascript called Typescript (all of the .ts files in my source directory). This takes\n            all current features of es5 and adds in the future features of es6 now. It then will compile these features\n            down to currently suppoted es5 scripts. It also adds in the ability to make your javascript statically typed.\n            But perhaps the best feature of angular 2 is it's modular nature.\n        </p>\n        <p>\n            Angular 2 is a modular based frameworks. A properly formatted angular 2 project will be composed of several\n            modular components. These components have their own encapsulated routes, html, css, and services. This means\n            that a well built component (say this blog) can provide a readme file that defines required endpoints and\n            will simply need to be included by the root component in order to be fully functional. Then as it has it's own\n            css you can define base formats that can then be overwritten by a particular sites individual global css files.\n            These components can also be lazy loaded (meaning they can be loaded after the initial page is shown) to\n            help reduce the initial load time of your page.\n        </p>", short: "Angular 2 is the best frameworks ever and everyone should use it", imgUrl: "/img/placeholder.png" });
        this.articles.push({ id: 4, title: "Angular 2", date: new Date(), body: "<p>\n            Angular 2 is the new frameworks from both Google and Microsoft (an unholy alliance I know). It provides\n            a unique set of features to build super fast single page applications for next-gen web apps. It utilizes\n            a new subset of Javascript called Typescript (all of the .ts files in my source directory). This takes\n            all current features of es5 and adds in the future features of es6 now. It then will compile these features\n            down to currently suppoted es5 scripts. It also adds in the ability to make your javascript statically typed.\n            But perhaps the best feature of angular 2 is it's modular nature.\n        </p>\n        <p>\n            Angular 2 is a modular based frameworks. A properly formatted angular 2 project will be composed of several\n            modular components. These components have their own encapsulated routes, html, css, and services. This means\n            that a well built component (say this blog) can provide a readme file that defines required endpoints and\n            will simply need to be included by the root component in order to be fully functional. Then as it has it's own\n            css you can define base formats that can then be overwritten by a particular sites individual global css files.\n            These components can also be lazy loaded (meaning they can be loaded after the initial page is shown) to\n            help reduce the initial load time of your page.\n        </p>", short: "It rocks", imgUrl: "/img/placeholder.png" });
    }
    BlogService.prototype.getBlogEntries = function () {
        return this.articles;
    };
    BlogService.prototype.getArticle = function (id) {
        for (var i = 0; i < this.articles.length; i++) {
            if (this.articles[i].id == id) {
                return this.articles[i];
            }
        }
        return { id: 0, body: "", title: "", date: "", short: "", imgUrl: "" };
    };
    BlogService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], BlogService);
    return BlogService;
}());
exports.BlogService = BlogService;
//# sourceMappingURL=blog.service.js.map